#!/usr/bin/env python3
"""Helper script to update requirements."""
import json
import os

import requests

ROOT = os.path.dirname(os.path.abspath(f"{__file__}/.."))

PKG_PATH = PACKAGE = None
for dname in [
    d
    for d in os.listdir(f"{ROOT}/custom_components")
    if os.path.isdir(f"{ROOT}/custom_components/{d}")
]:
    if dname != "__pycache__":
        PACKAGE = dname
        PKG_PATH = f"{ROOT}/custom_components/{PACKAGE}"
        break


def get_package(requre: str) -> str:
    """Extract package name from requirement."""
    return requre.split(">")[0].split("<")[0].split("!")[0].split("=")[0].split("~")[0]


harequire = []
request = requests.get(
    "https://raw.githubusercontent.com/home-assistant/home-assistant/dev/setup.py"
)
request = request.text.split("REQUIRES = [")[1].split("]")[0].split("\n")
for req in request:
    if "=" in req:
        harequire.append(get_package(req.split('"')[1]))

print(harequire)

with open(f"{PKG_PATH}/manifest.json") as manifest:
    manifest = json.load(manifest)
    requirements = {}
    for req in manifest["requirements"]:
        requirements[get_package(req)] = req
with open(f"{ROOT}/requirements.txt") as reqs:
    for req in reqs.readlines():
        req = req.replace("\n", "")
        pkg = get_package(req)
        if pkg in requirements:
            if pkg in harequire or pkg == "homeassistant":
                print(f"{pkg} in HA requirements, no need in manifest.")
                requirements.pop(pkg, None)
            else:
                requirements[pkg] = req
manifest["requirements"] = list(requirements.values())

print(json.dumps(manifest["requirements"], indent=4, sort_keys=True))

with open(f"{PKG_PATH}/manifest.json", "w") as manifestfile:
    manifestfile.write(json.dumps(manifest, indent=4, sort_keys=True))
